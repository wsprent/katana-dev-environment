# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("build-slave-01", "builduser"), BuildSlave("build-slave-02", "builduser")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9001


####### ARTIFACT SERVER SETTINGS
import artifactsettings

artifactServer = artifactsettings.get_artifact_server()
artifactServerDir = artifactsettings.get_artifact_server_directory()
artifactServerURL = artifactsettings.get_artifact_server_url()
artifactServerPort = artifactsettings.get_artifact_server_port()

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.custom.gitpoller import GitPoller
c['change_source'] = []

curlKey = 'curl'

repositories = dict()

repositories[curlKey] = { 
    curlKey : {
        'repository': 'https://github.com/Unity-Technologies/curl.git',
        'display_repository': 'https://github.com/Unity-Technologies/curl.git',
        'display_name': 'Curl Repository',
        'branch': ['master'],
        'project': 'general',
        'poller_settings': {
            'workdir': 'gitpoller-curl',
            'branches_exclude': [r'refs/pull/.*'],
        }
    }
}


codebasesParam = {}
sourceStamps = {}
from buildbot.process.properties import Interpolate
from buildbot.schedulers.forcesched import *

for cbkey, codebases in repositories.iteritems():
    for key, value in codebases.iteritems():
        codebasesParam[key] = CodebaseParameter(key, branch=StringParameter(name="branch", label="Branch",
                                                                            default=value['branch']),
                                                repository=FixedParameter(name="repository",
                                                                          default=value['repository']),
                                                project=FixedParameter(name="project", default=value['project']))
        sourceStamps[key] = {'codebase': '%s' % key, 'branch': Interpolate("%(src:" + key + ":branch)s"),
                             'repository': Interpolate("%(src:" + key + ":repository)s"),
                             'revision': Interpolate("%(src:" + key + ":revision)s")}

for repo in repositories:
    for repo_specific in repositories[repo]:
        repo_settings = repositories[repo][repo_specific]
        # Don't make a poller for any repo without poller_settings set,
        # or any repo with a specified poller-group - they are polled in a different buildmasterpoller
        if "poller_settings" in repo_settings \
                and "poller-group" not in repo_settings["poller_settings"]:
            repourl = repo_settings["repository"]
            poller_settings = repo_settings["poller_settings"]
            workdir = poller_settings['workdir']
            branches = {'include': [r'.*']}
            if "branches_exclude" in poller_settings:
                branches['exclude'] = poller_settings['branches_exclude']

            # Figure out if we need a gitpoller or a mercurial poller
            if repo_settings["repository"].endswith(".git"):
                c['change_source'].append(GitPoller(repourl=repourl, branches=branches,
                                                    workdir=workdir, pollInterval=900))
            else:
                c['change_source'].append(HgPoller(repourl=repourl, branches=branches,
                                                   workdir=workdir, pollInterval=900))          

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter

c['schedulers'] = []

c['schedulers'].append(SingleBranchScheduler(
    name="curlsinglebranch",
    change_filter=filter.ChangeFilter(branch='master'),
    treeStableTimer=None,
    builderNames=["buildcurl"]))
c['schedulers'].append(ForceScheduler(
    name="curlforce",
    builderNames=["buildcurl"],
t    properties=[],
    codebases=[codebasesParam[curlKey]])
)

####### PROJECTS

# Configure the projects, which will hold builders listed below
#
from buildbot.config import ProjectConfig

c['projects'] = [ProjectConfig(name="Build Curl", 
                               codebases=[repositories[curlKey]])]
####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.artifact import *
from buildbot.steps.slave import RemoveDirectory

###### BUILD FACTORIES

from buildbot.status.results import SKIPPED, SUCCESS
defaulttimeout = 4600

def StepSkipped(results, step):
    return results == SKIPPED

def StepPassedOrSkipped(results, step):
    return results == SKIPPED or results == SUCCESS

def validateRevision(step):
    properties = step.build.getProperties()

    if properties.hasProperty("owner"):
        owner = properties.getPropertySource("owner")
        
        # Check the revision when forcing a build
        if owner and "Force Build Form" in owner:
            return True
        
    sourcestamps = step.build.build_status.getSourceStamps()
    codebase = step.codebase

    for ss in sourcestamps:
        if ss.codebase == codebase:
            return not ss.revision

def RunGitCommand(factory, codebase='', doStepIf=True, hideStepIf=StepSkipped, **kwargs):
    factory.addStep(Git(repourl=Interpolate("%(src:" + '%s' % codebase + ":repository)s"), codebase=codebase,
                        submodules=True, mode='full', method='fresh',
                        doStepIf=doStepIf, hideStepIf=hideStepIf, timeout=defaulttimeout, haltOnFailure=True,
                        **kwargs))

    
def build_curl():
    factory = BuildFactory()
    # check out the source
    RunGitCommand(factory, codebase=curlKey)
    factory.addStep(ShellCommand(command=["./buildconf"]))
    factory.addStep(ShellCommand(command=["./configure"]))
    factory.addStep(ShellCommand(command=["make"]))

    factory.addStep(CreateArtifactDirectory(
        artifactDirectory='build', artifactServer=artifactServer,
        artifactServerDir=artifactServerDir,
        artifactServerPort=artifactServerPort)
    )

    factory.addStep(UploadArtifact(
        artifact='build',
        artifactDirectory='build',
        artifactServer=artifactServer,
        artifactServerDir=artifactServerDir,
        artifactServerURL=artifactServerURL,
        artifactServerPort=artifactServerPort,
        workdir='./')
    )
    return factory


from buildbot.config import BuilderConfig


c['builders'] = []

c['builders'].append(
    BuilderConfig(name="buildcurl",
                  project="Build Curl",
                  slavenames=["build-slave-01", "build-slave-02"],
                  factory=build_curl()))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.status.status_push import AutobahnStatusPush

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("user","password")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)

c['status'].append(html.WebStatus(http_port=8001, authz=authz_cfg))
c['status'].append(AutobahnStatusPush(serverIP="localhost", serverPort=8010, debug=False))

####### Project IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Katana Sample Config"
c['titleURL'] = "https://github.com/Unity-Technologies/katana"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8001/"


####### Realtime Server                                                                                                                                         

c['realTimeServer'] = "ws://localhost:8010/ws"


####### Autobahn Push                                                                                                                                           

c['autobahn_push'] = True

####### DB URL

c['db'] = get_database_url()
